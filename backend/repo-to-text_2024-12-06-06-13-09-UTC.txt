Directory: backend

Directory Structure:
```
.
├── .gitignore
├── .vscode
│   └── .vscode/sessions.json
├── apis.md
├── deals
│   ├── deals/__init__.py
│   ├── deals/admin.py
│   ├── deals/apps.py
│   ├── deals/exceptions.py
│   ├── deals/migrations
│   │   ├── deals/migrations/0001_initial.py
│   │   ├── deals/migrations/0002_alter_deal_options_remove_deal_restaurant_and_more.py
│   │   ├── deals/migrations/0003_alter_deal_options_remove_deal_created_at_and_more.py
│   │   ├── deals/migrations/0004_deal_latitude_deal_longitude.py
│   │   ├── deals/migrations/0005_deal_recurrence_days_alter_deal_rating.py
│   │   ├── deals/migrations/0006_alter_deal_contact_email.py
│   │   ├── deals/migrations/0007_alter_deal_date.py
│   │   ├── deals/migrations/__init__.py
│   ├── deals/models.py
│   ├── deals/serializers.py
│   ├── deals/tests.py
│   ├── deals/urls.py
│   └── deals/views.py
├── manage.py
├── requirements.txt
├── todayonly
│   ├── todayonly/__init__.py
│   ├── todayonly/asgi.py
│   ├── todayonly/settings.py
│   ├── todayonly/urls.py
│   └── todayonly/wsgi.py
```

Contents of requirements.txt:
```
asgiref==3.8.1
Django==4.2.16
django-cors-headers==4.6.0
djangorestframework==3.15.2
python-dotenv==1.0.1
sqlparse==0.5.2
typing_extensions==4.12.2

```

Contents of apis.md:
```
# Today Only! API Documentation

## Overview

REST API for the Today Only! UIUC campus food deals mobile application. All responses are in JSON format.

## Base URL

`https://api.todayonly.example.com`

## Endpoints

### 1. List Deals

Get a list of food deals with filtering options.

**Endpoint:** `GET /api/deals`

**Query Parameters:**
| Parameter | Type | Required | Description |
|-------------|---------|----------|-----------------------------------------------------------------------------------------------|
| sort_by | string | No | Sort deals by specific criteria. Options: `rating`, `distance`. Default: `rating` |
| latitude | float | Conditional¹ | Latitude of user's location for distance sorting. Required if `sort_by=distance` |
| longitude | float | Conditional¹ | Longitude of user's location for distance sorting. Required if `sort_by=distance` |
| date | string | No | Filter deals by date. Format: `YYYY-MM-DD`. Default: current date |
| view_type | string | No | View deals by time period. Options: `day`, `week`, `month`. Default: `day` |
| status | string | No | Filter by deal status. Options: `active`, `upcoming`. Default: `active` |

> **¹ Conditional Requirement:** `latitude` and `longitude` are required when `sort_by` is set to `distance`.

**Success Response (200):**

```json
{
	"deals": [
		{
			"id": "123",
			"restaurant_name": "Burgers & Fries",
			"title": "50% Off Burgers",
			"description": "Half price on all burgers",
			"start_time": "11:00",
			"end_time": "14:00",
			"date": "2024-01-20",
			"student_id_required": true,
			"rating": 4.5,
			"total_ratings": 128
		}
	]
}
```

````

### 2. Get Deal Detail

Get detailed information about a specific deal.

**Endpoint:** `GET /api/deals/{deal_id}`

**Path Parameters:**
| Parameter | Type | Required | Description |
|-----------|--------|----------|----------------------------------|
| deal_id | string | Yes | Unique identifier of the deal |

**Success Response (200):**

```json
{
	"id": "123",
	"restaurant_name": "Burgers & Fries",
	"title": "50% Off Burgers",
	"description": "Half price on all burgers",
	"start_time": "11:00",
	"end_time": "14:00",
	"date": "2024-01-20",
	"student_id_required": true,
	"rating": 4.5,
	"total_ratings": 128,
	"requirements": "Must show valid student ID",
	"location": "123 Green Street, Champaign"
}
```

### 3. Submit Deal

Submit a new deal for review.

**Endpoint:** `POST /api/deals`

**Request Body Parameters:**
| Field | Type | Required | Description |
|----------------------|---------|----------|-----------------------------------------------------------|
| restaurant_name | string | Yes | Name of the restaurant offering the deal |
| title | string | Yes | Short, descriptive title of the deal (max 100 chars) |
| description | string | Yes | Detailed description of the deal (max 500 chars) |
| date | string | Yes | Deal date. Format: `YYYY-MM-DD` |
| start_time | string | Yes | Deal start time. Format: `HH:MM` (24-hour) |
| end_time | string | Yes | Deal end time. Format: `HH:MM` (24-hour) |
| student_id_required | boolean | Yes | Whether student ID is required to claim the deal |
| requirements | string | No | Additional requirements or conditions (max 200 chars) |
| contact_email | string | Yes | Contact email for deal verification |

**Success Response (201):**

```json
{
	"id": "123",
	"status": "pending",
	"message": "Deal submitted successfully and pending review"
}
```

### 4. Rate Deal

Submit a rating for a deal.

**Endpoint:** `POST /api/deals/{deal_id}/rate`

**Path Parameters:**
| Parameter | Type | Required | Description |
|-----------|--------|----------|-------------------------------|
| deal_id | string | Yes | Unique identifier of the deal |

**Request Body Parameters:**
| Field | Type | Required | Description |
|--------|---------|----------|------------------------------------|
| rating | integer | Yes | Rating value from 1 to 5 |

**Success Response (200):**

```json
{
	"success": true,
	"new_average_rating": 4.5,
	"total_ratings": 129
}
```

## Error Responses

All endpoints may return the following error responses:

### Bad Request (400)

Returned when request parameters are invalid.

```json
{
	"error": "validation_error",
	"message": "Invalid date format. Use YYYY-MM-DD"
}
```

### Not Found (404)

Returned when requested resource doesn't exist.

```json
{
	"error": "not_found",
	"message": "Deal not found"
}
```

### Server Error (500)

Returned when server encounters an error.

```json
{
	"error": "server_error",
	"message": "An unexpected error occurred"
}
```
````

```

Contents of manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todayonly.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

Contents of deals/models.py:
```
# deals/models.py

import uuid
from django.db import models
from django.db.models import JSONField


class Deal(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    restaurant_name = models.CharField(max_length=255)
    title = models.CharField(max_length=100)
    description = models.TextField(max_length=500)
    date = models.DateField(blank=True, null=True)
    start_time = models.TimeField()
    end_time = models.TimeField()
    student_id_required = models.BooleanField(default=False)
    requirements = models.CharField(max_length=200, blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    longitude = models.FloatField(blank=True, null=True)
    latitude = models.FloatField(blank=True, null=True)
    contact_email = models.EmailField(blank=True, null=True)
    total_ratings = models.PositiveIntegerField(default=0)
    rating = models.FloatField(default=5.0)  # Average rating
    recurrence_days = JSONField(blank=True, null=True, default=list)

    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('active', 'Active'),
        ('upcoming', 'Upcoming'),
    ]
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')

    def __str__(self):
        return f"{self.title} at {self.restaurant_name}"


class Rating(models.Model):
    deal = models.ForeignKey(Deal, on_delete=models.CASCADE, related_name='ratings')
    rating = models.PositiveSmallIntegerField()  # Rating from 1 to 5
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Rating {self.rating} for {self.deal.title}"

```

Contents of deals/serializers.py:
```
# deals/serializers.py

from rest_framework import serializers
from .models import Deal, Rating


class DealListSerializer(serializers.ModelSerializer):
    class Meta:
        model = Deal
        fields = [
            'id',
            'restaurant_name',
            'title',
            'description',
            'start_time',
            'end_time',
            'date',
            'student_id_required',
            'rating',
            'total_ratings',
        ]


class DealDetailSerializer(serializers.ModelSerializer):
    class Meta:
        model = Deal
        fields = [
            'id',
            'restaurant_name',
            'title',
            'description',
            'start_time',
            'end_time',
            'date',
            'student_id_required',
            'rating',
            'total_ratings',
            'requirements',
            'location',
        ]


class DealSubmitSerializer(serializers.ModelSerializer):
    recurrence_days = serializers.ListField(
        child=serializers.CharField(),
        required=False,
        allow_empty=True,
        help_text="List of weekdays when the deal recurs (e.g. ['monday', 'friday'])"
    )

    class Meta:
        model = Deal
        fields = [
            'id',
            'restaurant_name',
            'title',
            'description',
            'date',
            'start_time',
            'end_time',
            'student_id_required',
            'requirements',
            'contact_email',
            'recurrence_days',  # add this field
        ]
        read_only_fields = ['id', 'status']


class RatingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Rating
        fields = ['rating']

```

Contents of deals/__init__.py:
```

```

Contents of deals/apps.py:
```
from django.apps import AppConfig


class DealsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'deals'

```

Contents of deals/admin.py:
```
# deals/admin.py
from django.contrib import admin
from .models import Deal


@admin.register(Deal)
class DealAdmin(admin.ModelAdmin):
    list_display = ('restaurant_name', 'title', 'date', 'status', 'rating')
    list_filter = ('status', 'date', 'student_id_required')
    search_fields = ('restaurant_name', 'title', 'description')
    # readonly_fields = ('rating', 'total_ratings')

```

Contents of deals/exceptions.py:
```
# deals/exceptions.py
from rest_framework.exceptions import APIException
from rest_framework import status


class DealNotFoundError(APIException):
    status_code = status.HTTP_404_NOT_FOUND
    default_detail = 'Deal not found'
    default_code = 'not_found'


class ValidationError(APIException):
    status_code = status.HTTP_400_BAD_REQUEST
    default_detail = 'Invalid data'
    default_code = 'validation_error'

```

Contents of deals/tests.py:
```
# # deals/tests.py

# from django.test import TestCase
# from django.urls import reverse
# from rest_framework import status
# from rest_framework.test import APIClient
# from .models import Deal
# import uuid


# class DealAPITests(TestCase):
#     def setUp(self):
#         self.client = APIClient()
#         self.deal = Deal.objects.create(
#             restaurant_name="Test Restaurant",
#             title="Test Deal",
#             description="Test Description",
#             date="2024-01-20",
#             start_time="11:00",
#             end_time="14:00",
#             student_id_required=True,
#             contact_email="contact@example.com",
#             status="active",
#         )
#         self.deal_id = str(self.deal.id)

#     def test_list_deals(self):
#         response = self.client.get('/api/deals/')
#         self.assertEqual(response.status_code, status.HTTP_200_OK)

#     def test_get_deal_detail(self):
#         response = self.client.get(f'/api/deals/{self.deal_id}/')
#         self.assertEqual(response.status_code, status.HTTP_200_OK)

#     def test_create_deal(self):
#         data = {
#             "restaurant_name": "New Restaurant",
#             "title": "New Deal",
#             "description": "New Description",
#             "date": "2024-02-20",
#             "start_time": "12:00",
#             "end_time": "15:00",
#             "student_id_required": False,
#             "contact_email": "new_contact@example.com"
#         }
#         response = self.client.post('/api/deals/', data, format='json')
#         self.assertEqual(response.status_code, status.HTTP_201_CREATED)

#     def test_rate_deal(self):
#         data = {"rating": 5}
#         response = self.client.post(f'/api/deals/{self.deal_id}/rate/', data, format='json')
#         self.assertEqual(response.status_code, status.HTTP_200_OK)

# deals/tests.py

from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIClient
from .models import Deal
import uuid
from datetime import datetime


class DealAPITests(TestCase):
    def setUp(self):
        self.client = APIClient()

        # A deal with a specific date
        self.deal_with_date = Deal.objects.create(
            restaurant_name="Test Restaurant",
            title="One-time Deal",
            description="Valid only on this specific day.",
            date="2024-12-10",  # Specific date
            start_time="11:00",
            end_time="14:00",
            student_id_required=False,
            contact_email="contact@example.com",
            status="active",
        )

        # A recurring deal (Monday and Wednesday)
        self.recurring_deal = Deal.objects.create(
            restaurant_name="Recurring Café",
            title="Weekly Coffee Special",
            description="Special deal every Monday and Wednesday.",
            date=None,  # No specific date
            start_time="08:00",
            end_time="10:00",
            student_id_required=False,
            contact_email="deals@recurringcafe.com",
            status="active",
            recurrence_days=["monday", "wednesday"],  # Recurs on Monday and Wednesday
        )

        # A recurring deal without today in recurrence_days
        self.non_matching_recurring_deal = Deal.objects.create(
            restaurant_name="Non-matching Deal",
            title="Not Today Special",
            description="Doesn't match today's weekday.",
            date=None,  # No specific date
            start_time="09:00",
            end_time="12:00",
            student_id_required=False,
            contact_email="deals@notoday.com",
            status="active",
            recurrence_days=["friday"],  # Recurs only on Friday
        )

    def test_list_deals_on_specific_date(self):
        """Test that deals are correctly filtered for a specific date"""
        response = self.client.get('/api/deals/', {'date': '2024-12-10'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        deals = response.json().get('deals', [])
        deal_ids = [deal['id'] for deal in deals]

        # Assert only the deal with a matching specific date is returned
        self.assertIn(str(self.deal_with_date.id), deal_ids)
        self.assertNotIn(str(self.recurring_deal.id), deal_ids)
        self.assertNotIn(str(self.non_matching_recurring_deal.id), deal_ids)

    def test_list_deals_on_recurrence_day(self):
        """Test that recurring deals are returned based on recurrence_days"""
        # Simulate a Monday query
        response = self.client.get('/api/deals/', {'date': '2024-12-09'})  # 2024-12-09 is a Monday
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        deals = response.json().get('deals', [])
        deal_ids = [deal['id'] for deal in deals]

        # Assert the recurring deal with Monday in recurrence_days is returned
        self.assertIn(str(self.recurring_deal.id), deal_ids)
        self.assertNotIn(str(self.non_matching_recurring_deal.id), deal_ids)

    def test_list_deals_on_null_date_and_recurrence(self):
        """Test that deals with NULL date and matching recurrence_days are returned"""
        # Simulate a Wednesday query
        response = self.client.get('/api/deals/', {'date': '2024-12-11'})  # 2024-12-11 is a Wednesday
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        deals = response.json().get('deals', [])
        deal_ids = [deal['id'] for deal in deals]

        # Assert the recurring deal with Wednesday in recurrence_days is returned
        self.assertIn(str(self.recurring_deal.id), deal_ids)

    def test_list_deals_excludes_non_matching_recurrence(self):
        """Test that deals with recurrence_days not matching today's weekday are excluded"""
        # Simulate a Wednesday query
        response = self.client.get('/api/deals/', {'date': '2024-12-11'})  # 2024-12-11 is a Wednesday
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        deals = response.json().get('deals', [])
        deal_ids = [deal['id'] for deal in deals]

        # Assert the non-matching recurring deal is not returned
        self.assertNotIn(str(self.non_matching_recurring_deal.id), deal_ids)

    def test_list_deals_without_date(self):
        """Test deals are filtered correctly when no date is specified (use today's date)"""
        # Simulate today's date (use datetime.now())
        today = datetime.now().strftime('%Y-%m-%d')
        weekday_name = datetime.now().strftime('%A').lower()  # Today's weekday name (e.g., "monday")

        response = self.client.get('/api/deals/')  # No date provided
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        deals = response.json().get('deals', [])
        deal_ids = [deal['id'] for deal in deals]

        # Assert deals with matching recurrence_days for today are returned
        if weekday_name in self.recurring_deal.recurrence_days:
            self.assertIn(str(self.recurring_deal.id), deal_ids)
        else:
            self.assertNotIn(str(self.recurring_deal.id), deal_ids)

```

Contents of deals/urls.py:
```
# deals/urls.py

from django.urls import path
from .views import DealListCreateView, DealDetailView, DealRateView

urlpatterns = [
    path('deals/', DealListCreateView.as_view(), name='deal-list-create'),
    path('deals/<uuid:id>/', DealDetailView.as_view(), name='deal-detail'),
    path('deals/<uuid:deal_id>/rate/', DealRateView.as_view(), name='deal-rate'),
]

```

Contents of deals/views.py:
```
# deals/views.py

from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError, NotFound
from django.utils import timezone
from django.db.models import Avg, Q, F
from django.db.models.functions import Sqrt, Power
from datetime import datetime
import calendar

from .models import Deal, Rating
from .serializers import (
    DealListSerializer,
    DealDetailSerializer,
    DealSubmitSerializer,
    RatingSerializer,
)


class DealListCreateView(generics.GenericAPIView):
    queryset = Deal.objects.all()

    def get_serializer_class(self):
        if self.request.method == 'POST':
            return DealSubmitSerializer
        return DealListSerializer

    def get(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = DealListSerializer(queryset, many=True)
        return Response({'deals': serializer.data})

    def get_queryset(self):
        queryset = Deal.objects.all()

        sort_by = self.request.query_params.get('sort_by', 'rating')
        date = self.request.query_params.get('date', timezone.now().date().isoformat())
        view_type = self.request.query_params.get('view_type', 'day')
        status_param = self.request.query_params.get('status', 'active')
        latitude = self.request.query_params.get('latitude', None)
        longitude = self.request.query_params.get('longitude', None)

        # Filter by status
        if status_param in ['active', 'upcoming']:
            queryset = queryset.filter(status=status_param)

        # Parse date
        try:
            date_obj = datetime.strptime(date, '%Y-%m-%d').date()
        except ValueError:
            raise ValidationError({
                'error': 'validation_error',
                'message': 'Invalid date format. Use YYYY-MM-DD'
            })

        if view_type == 'day':
            date_range = [date_obj]
        elif view_type == 'week':
            week_start = date_obj - timezone.timedelta(days=date_obj.weekday())
            date_range = [week_start + timezone.timedelta(days=i) for i in range(7)]
        elif view_type == 'month':
            _, last_day = calendar.monthrange(date_obj.year, date_obj.month)
            date_range = [date_obj.replace(day=d) for d in range(1, last_day + 1)]
        else:
            date_range = [date_obj]

        # Determine weekdays in range
        weekdays_in_range = list({calendar.day_name[d.weekday()].lower() for d in date_range})

        # Filter by date or recurrence. Deals that have no date (NULL) but match recurrence_days should also appear.
        queryset = queryset.filter(
            Q(date__in=date_range)
            | (Q(recurrence_days__overlap=weekdays_in_range))
        )

        # Sorting
        if sort_by == 'rating':
            queryset = queryset.order_by('-rating')
        elif sort_by == 'distance':
            if latitude is None or longitude is None:
                raise ValidationError({
                    'error': 'validation_error',
                    'message': 'latitude and longitude are required when sort_by=distance'
                })
            user_latitude = float(latitude)
            user_longitude = float(longitude)
            queryset = queryset.annotate(
                distance=Sqrt(
                    Power(F('latitude') - user_latitude, 2) +
                    Power(F('longitude') - user_longitude, 2)
                )
            ).order_by('distance')
        else:
            queryset = queryset.order_by('-rating')

        return queryset

    def post(self, request, *args, **kwargs):
        serializer = DealSubmitSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        deal = serializer.save()
        return Response({
            'id': str(deal.id),
            'status': deal.status,
            'message': 'Deal submitted successfully and pending review'
        }, status=status.HTTP_201_CREATED)


class DealDetailView(generics.RetrieveAPIView):
    queryset = Deal.objects.all()
    serializer_class = DealDetailSerializer
    lookup_field = 'id'

    def get(self, request, *args, **kwargs):
        try:
            deal = self.get_object()
        except Deal.DoesNotExist:
            raise NotFound({
                'error': 'not_found',
                'message': 'Deal not found'
            })
        serializer = self.get_serializer(deal)
        return Response(serializer.data)


class DealRateView(generics.CreateAPIView):
    serializer_class = RatingSerializer

    def post(self, request, *args, **kwargs):
        deal_id = self.kwargs.get('deal_id')
        try:
            deal = Deal.objects.get(id=deal_id)
        except Deal.DoesNotExist:
            raise NotFound({
                'error': 'not_found',
                'message': 'Deal not found'
            })

        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        rating_value = serializer.validated_data['rating']

        if not 1 <= rating_value <= 5:
            raise ValidationError({
                'error': 'validation_error',
                'message': 'Rating value must be between 1 and 5'
            })

        Rating.objects.create(deal=deal, rating=rating_value)

        total_ratings = Rating.objects.filter(deal=deal).count()
        avg_rating = Rating.objects.filter(deal=deal).aggregate(Avg('rating'))['rating__avg']
        deal.total_ratings = total_ratings
        deal.rating = round(avg_rating, 2)
        deal.save()

        return Response({
            'success': True,
            'new_average_rating': deal.rating,
            'total_ratings': total_ratings
        }, status=status.HTTP_200_OK)

```

Contents of deals/migrations/0002_alter_deal_options_remove_deal_restaurant_and_more.py:
```
# Generated by Django 4.2.16 on 2024-11-22 19:00

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='deal',
            options={'ordering': ['-rating', '-date']},
        ),
        migrations.RemoveField(
            model_name='deal',
            name='restaurant',
        ),
        migrations.AddField(
            model_name='deal',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='deal',
            name='location',
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AddField(
            model_name='deal',
            name='restaurant_name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name='deal',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='date',
            field=models.DateField(),
        ),
        migrations.AlterField(
            model_name='deal',
            name='description',
            field=models.TextField(max_length=500),
        ),
        migrations.AlterField(
            model_name='deal',
            name='rating',
            field=models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)]),
        ),
        migrations.AlterField(
            model_name='deal',
            name='requirements',
            field=models.TextField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('upcoming', 'Upcoming')], default='pending', max_length=20),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_ratings',
            field=models.IntegerField(default=0),
        ),
        migrations.DeleteModel(
            name='Restaurant',
        ),
    ]

```

Contents of deals/migrations/0004_deal_latitude_deal_longitude.py:
```
# Generated by Django 4.2.16 on 2024-11-22 19:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0003_alter_deal_options_remove_deal_created_at_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='deal',
            name='latitude',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='deal',
            name='longitude',
            field=models.FloatField(blank=True, null=True),
        ),
    ]

```

Contents of deals/migrations/__init__.py:
```

```

Contents of deals/migrations/0005_deal_recurrence_days_alter_deal_rating.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0004_deal_latitude_deal_longitude'),
    ]

    operations = [
        migrations.AddField(
            model_name='deal',
            name='recurrence_days',
            field=models.JSONField(blank=True, default=list, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='rating',
            field=models.FloatField(default=5.0),
        ),
    ]

```

Contents of deals/migrations/0003_alter_deal_options_remove_deal_created_at_and_more.py:
```
# Generated by Django 4.2.16 on 2024-11-22 19:08

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0002_alter_deal_options_remove_deal_restaurant_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='deal',
            options={},
        ),
        migrations.RemoveField(
            model_name='deal',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='deal',
            name='updated_at',
        ),
        migrations.AlterField(
            model_name='deal',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='deal',
            name='location',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='rating',
            field=models.FloatField(default=0.0),
        ),
        migrations.AlterField(
            model_name='deal',
            name='requirements',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='deal',
            name='restaurant_name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='deal',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('upcoming', 'Upcoming')], default='pending', max_length=10),
        ),
        migrations.AlterField(
            model_name='deal',
            name='total_ratings',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='deals.deal')),
            ],
        ),
    ]

```

Contents of deals/migrations/0007_alter_deal_date.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:43

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0006_alter_deal_contact_email'),
    ]

    operations = [
        migrations.AlterField(
            model_name='deal',
            name='date',
            field=models.DateField(blank=True, null=True),
        ),
    ]

```

Contents of deals/migrations/0006_alter_deal_contact_email.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:43

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('deals', '0005_deal_recurrence_days_alter_deal_rating'),
    ]

    operations = [
        migrations.AlterField(
            model_name='deal',
            name='contact_email',
            field=models.EmailField(blank=True, max_length=254, null=True),
        ),
    ]

```

Contents of deals/migrations/0001_initial.py:
```
# Generated by Django 4.2.16 on 2024-11-22 02:09

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('location', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('student_id_required', models.BooleanField(default=False)),
                ('requirements', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('status', models.CharField(choices=[('active', 'Active'), ('upcoming', 'Upcoming'), ('pending', 'Pending Review')], default='pending', max_length=20)),
                ('rating', models.FloatField(default=0.0)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deals', to='deals.restaurant')),
            ],
        ),
    ]

```

Contents of todayonly/asgi.py:
```
"""
ASGI config for todayonly project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todayonly.settings')

application = get_asgi_application()

```

Contents of todayonly/__init__.py:
```

```

Contents of todayonly/settings.py:
```
"""
Django settings for todayonly project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xh(7k5t)r8!$)x$cm)t^au5173q03e+&#q6&&s)-6(xmy^b*qz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['averyqian.pythonanywhere.com', '127.0.0.1', 'localhost']

PROJECT_ROOT = os.path.normpath(os.path.dirname(__file__))
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
STATIC_URL = '/static/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'corsheaders',
    # Local apps
    'deals',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # other middleware
    'corsheaders.middleware.CorsMiddleware',

]

CORS_ALLOW_ALL_ORIGINS = True  # Only in development!

# Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
}
ROOT_URLCONF = 'todayonly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todayonly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```

Contents of todayonly/urls.py:
```
# todayonly/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('deals.urls')),
]

```

Contents of todayonly/wsgi.py:
```
"""
WSGI config for todayonly project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todayonly.settings')

application = get_wsgi_application()

```
